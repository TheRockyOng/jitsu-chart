{{- if .Values.config.autoGenerateTokens }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "jitsu.fullname" . }}-auto-generate-tokens-{{ sha1sum (toJson .Values) | substr 0 8 }}
  labels:
    {{- include "jitsu.labels" . | nindent 4 }}
spec:
  backoffLimit: 1
  template:
    metadata:
      labels:
        {{- include "jitsu.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "jitsu.serviceAccountName" . }}
      containers:
        - name: auto-generate-tokens
          image: "alpine/k8s:{{ .Capabilities.KubeVersion.Version | trimPrefix "v"}}"
          env:
            - name: FULLNAME
              value: {{ include "jitsu.fullname" . }}
            - name: SECRET_LENGTH
              value: "32"
            - name: TOKEN_LENGTH
              value: "32"
            - name: SALT_LENGTH
              value: "32"
          command: ["sh", "-c"]
          args:
            - |
              if kubectl get secrets "$FULLNAME-tokens" > /dev/null 2>&1; then
                echo "Secret $FULLNAME-tokens already exists, skipping generation"
                exit 0
              fi
              set -e
              random_string() {
                length="$1"
                cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c "$length"
              }
              hash_token() {
                token="$1"
                salt="$2"
                secret="$3"
                echo -n "$token$salt$secret" | sha512sum | awk '{print $1}' | tr -d '\n'
              }
              ingestTokenSecret=$(random_string $SECRET_LENGTH)
              bulkerTokenSecret=$(random_string $SECRET_LENGTH)
              syncctlTokenSecret=$(random_string $SECRET_LENGTH)
              consoleTokenSecret=$(random_string $SECRET_LENGTH)

              ingestAuthToken=$(random_string $TOKEN_LENGTH)
              bulkerAuthToken=$(random_string $TOKEN_LENGTH)
              syncctlAuthToken=$(random_string $TOKEN_LENGTH)
              consoleAuthToken=$(random_string $TOKEN_LENGTH)

              ingestAuthTokenSalt=$(random_string $SALT_LENGTH)
              bulkerAuthTokenSalt=$(random_string $SALT_LENGTH)
              syncctlAuthTokenSalt=$(random_string $SALT_LENGTH)
              consoleAuthTokenSalt=$(random_string $SALT_LENGTH)

              ingestAuthTokens="$ingestAuthTokenSalt.$(hash_token $ingestAuthToken $ingestAuthTokenSalt $ingestTokenSecret)"
              bulkerAuthTokens="$bulkerAuthTokenSalt.$(hash_token $bulkerAuthToken $bulkerAuthTokenSalt $bulkerTokenSecret)"
              syncctlAuthTokens="$syncctlAuthTokenSalt.$(hash_token $syncctlAuthToken $syncctlAuthTokenSalt $syncctlTokenSecret)"
              consoleAuthTokens="$consoleAuthTokenSalt.$(hash_token $consoleAuthToken $consoleAuthTokenSalt $consoleTokenSecret)"

              kubectl apply -f- <<EOF
              apiVersion: v1
              kind: Secret
              metadata:
                name: $FULLNAME-tokens
              type: Opaque
              stringData:
                ingestTokenSecret: "$ingestTokenSecret"
                bulkerTokenSecret: "$bulkerTokenSecret"
                syncctlTokenSecret: "$syncctlTokenSecret"
                consoleTokenSecret: "$consoleTokenSecret"

                ingestAuthToken: "$ingestAuthToken"
                bulkerAuthToken: "$bulkerAuthToken"
                syncctlAuthToken: "$syncctlAuthToken"
                consoleAuthToken: "service-admin-account:$consoleAuthToken"

                ingestAuthTokens: "$ingestAuthTokens"
                bulkerAuthTokens: "$bulkerAuthTokens"
                syncctlAuthTokens: "$syncctlAuthTokens"
                consoleAuthTokens: "$consoleAuthTokens"
              EOF
{{- end }}
